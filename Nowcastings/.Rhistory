return(Wahrscheinlichkeit)
}
diseases=c("sari","sari_covid","sari_influenza","sari_rsv","Rest")
for (disea in diseases) {
target[[disea]]=target[[disea]][which(target[[disea]]$age_group=="00+"),]
}
for (i in 1:5) {
print(Überdeckungswarscheinlichkeit_Krankheit(nowcast[[i]],target[[i]],0.5))
print(Überdeckungswarscheinlichkeit_Krankheit(nowcast[[i]],target[[i]],0.95))
}
Nowcast=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\Nowcasts\\Nowcast_künstlichesProb_False_10.csv")
target=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\Evaluation\\target-icosari-sari.csv")
Nowcast_zerlegen_Alter=function(Nowcast){
ages=unique(Nowcast$age_group)
Nowcast_einzel=list()
i=1
for (age in ages){
Nowcast_einzel[[i]]=Nowcast[which(Nowcast$age_group==age),]
i=i+1
}
return(Nowcast_einzel)
}
Nowcast_zerlegen_Krankheit=function(Nowcast){
Nowcast_einzel=list()
i=1
diseases=unique(Nowcast$disease)
for (disea in diseases){
Nowcast_einzel[[i]]=Nowcast[which(Nowcast$disease==disea),]
i=i+1
}
return(Nowcast_einzel)
}
nowcast=Nowcast_zerlegen_Alter(Nowcast)
unique(nowcast[[1]]$target_end_date)
Überdeckungswarscheinlichkeit_Krankheit=function(nowcast,target, Konfidenzniveau){
treffer=0
gesamt=0
alpha=1-Konfidenzniveau
print(paste0(unique(nowcast$age_group),"  ", Konfidenzniveau))
for (date in unique(nowcast$target_end_date)){
nowcast_date=unique(nowcast[which(nowcast$target_end_date==date),3])
for(j in nowcast_date){
if(target[which(target$date==date),6]<=nowcast[which(nowcast$forecast_date==j&nowcast$target_end_date==date&nowcast$quantile==as.character(1-alpha/2)),8]&
target[which(target$date==date),6]>=nowcast[which(nowcast$forecast_date==j&nowcast$target_end_date==date&nowcast$quantile==as.character(alpha/2)),8]){
treffer=treffer+1
}
gesamt=gesamt+1
}
}
Wahrscheinlichkeit=treffer/gesamt
return(Wahrscheinlichkeit)
}
ages=c("00+","00-04","05-14","15-34","35-59","60-79","80+")
target_age=list()
for (age in ages) {
target_age[[age]]=target[which(target$age_group==age),]
}
for (i in 1:7) {
print(Überdeckungswarscheinlichkeit_Krankheit(nowcast[[i]],target_age[[i]],0.5))
print(Überdeckungswarscheinlichkeit_Krankheit(nowcast[[i]],target_age[[i]],0.95))
}
Nowcast=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\Nowcasts\\Nowcast_künstlichesProb_True.csv")
target=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\Evaluation\\target-icosari-sari.csv")
Nowcast_zerlegen_Alter=function(Nowcast){
ages=unique(Nowcast$age_group)
Nowcast_einzel=list()
i=1
for (age in ages){
Nowcast_einzel[[i]]=Nowcast[which(Nowcast$age_group==age),]
i=i+1
}
return(Nowcast_einzel)
}
Nowcast_zerlegen_Krankheit=function(Nowcast){
Nowcast_einzel=list()
i=1
diseases=unique(Nowcast$disease)
for (disea in diseases){
Nowcast_einzel[[i]]=Nowcast[which(Nowcast$disease==disea),]
i=i+1
}
return(Nowcast_einzel)
}
nowcast=Nowcast_zerlegen_Alter(Nowcast)
unique(nowcast[[1]]$target_end_date)
Überdeckungswarscheinlichkeit_Krankheit=function(nowcast,target, Konfidenzniveau){
treffer=0
gesamt=0
alpha=1-Konfidenzniveau
print(paste0(unique(nowcast$age_group),"  ", Konfidenzniveau))
for (date in unique(nowcast$target_end_date)){
nowcast_date=unique(nowcast[which(nowcast$target_end_date==date),3])
for(j in nowcast_date){
if(target[which(target$date==date),6]<=nowcast[which(nowcast$forecast_date==j&nowcast$target_end_date==date&nowcast$quantile==as.character(1-alpha/2)),8]&
target[which(target$date==date),6]>=nowcast[which(nowcast$forecast_date==j&nowcast$target_end_date==date&nowcast$quantile==as.character(alpha/2)),8]){
treffer=treffer+1
}
gesamt=gesamt+1
}
}
Wahrscheinlichkeit=treffer/gesamt
return(Wahrscheinlichkeit)
}
ages=c("00+","00-04","05-14","15-34","35-59","60-79","80+")
target_age=list()
for (age in ages) {
target_age[[age]]=target[which(target$age_group==age),]
}
for (i in 1:7) {
print(Überdeckungswarscheinlichkeit_Krankheit(nowcast[[i]],target_age[[i]],0.5))
print(Überdeckungswarscheinlichkeit_Krankheit(nowcast[[i]],target_age[[i]],0.95))
}
Nowcast=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\Nowcasts\\Nowcast_künstlichesProb_True.csv")
target=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\Evaluation\\target-icosari-sari.csv")
Nowcast_zerlegen_Alter=function(Nowcast){
ages=unique(Nowcast$age_group)
Nowcast_einzel=list()
i=1
for (age in ages){
Nowcast_einzel[[i]]=Nowcast[which(Nowcast$age_group==age),]
i=i+1
}
return(Nowcast_einzel)
}
Nowcast_zerlegen_Krankheit=function(Nowcast){
Nowcast_einzel=list()
i=1
diseases=unique(Nowcast$disease)
for (disea in diseases){
Nowcast_einzel[[i]]=Nowcast[which(Nowcast$disease==disea),]
i=i+1
}
return(Nowcast_einzel)
}
nowcast=Nowcast_zerlegen_Alter(Nowcast)
unique(nowcast[[1]]$target_end_date)
Überdeckungswarscheinlichkeit_Krankheit=function(nowcast,target, Konfidenzniveau){
treffer=0
gesamt=0
alpha=1-Konfidenzniveau
print(paste0(unique(nowcast$age_group),"  ", Konfidenzniveau))
for (date in unique(nowcast$target_end_date)){
nowcast_date=unique(nowcast[which(nowcast$target_end_date==date),3])
for(j in nowcast_date){
if(target[which(target$date==date),6]<=nowcast[which(nowcast$forecast_date==j&nowcast$target_end_date==date&nowcast$quantile==as.character(1-alpha/2)),8]&
target[which(target$date==date),6]>=nowcast[which(nowcast$forecast_date==j&nowcast$target_end_date==date&nowcast$quantile==as.character(alpha/2)),8]){
treffer=treffer+1
}
gesamt=gesamt+1
}
}
Wahrscheinlichkeit=treffer/gesamt
return(Wahrscheinlichkeit)
}
ages=c("00+","00-04","05-14","15-34","35-59","60-79","80+")
target_age=list()
for (age in ages) {
target_age[[age]]=target[which(target$age_group==age),]
}
for (i in 1:7) {
print(Überdeckungswarscheinlichkeit_Krankheit(nowcast[[i]],target_age[[i]],0.5))
print(Überdeckungswarscheinlichkeit_Krankheit(nowcast[[i]],target_age[[i]],0.95))
}
# Set locale to English, otherwise there will be some unnecessary warnings
# (when weekdays are checked)
#Sys.setlocale(category = "LC_TIME", locale = "en_US.UTF8")
Sys.setlocale("LC_TIME", "English_United States")
# path of the repo:
path_repo <- "."
# get functions:
source("C:\\Users\\felix\\Desktop\\Uni\\BA\\Code\\Fremder Code\\baseline.R")
source("C:\\Users\\felix\\Desktop\\Uni\\BA\\Code\\Fremder Code\\respinow_viz.R")
source("C:\\Users\\felix\\Desktop\\Uni\\BA\\Code\\eigener Code\\Datenvorbereitung_künstlichesProb.R")
# define data sources (you need just icosari):
data_source <- "icosari"
# diseases per data source.
#diseases <- c("sari")
# will later likely become:
diseases <- c("sari")
# dates for which to produce nowcasts:
# for retrospective generation:
#forecast_dates=c(as.Date("2024-10-03"),as.Date("2025-04-10"))
# or select an individual forecast_date:
#forecast_dates <- as.Date("2024-10-10")                   #Da Meldungen immer Donnerstags sollte dieses Datum ebenfalls ein Donnerstag sein
# set the sizes of training data sets
n_history_dispersion <- 15
n_history_expectations <- 15
max_delay <- 4
max_horizon <- 4
forecast_dates <- seq(from = as.Date("2024-10-10"),                     #Muss geändert werden
to = as.Date("2025-04-10"),
by = 7)
# specify if plots are to be generated for each nowcast:
plot_all <- TRUE
class(forecast_dates)
# read in reporting triangles:
triangles <- targets <- list()
#for (disease in diseases) {
# note: we load raw reporting triangles, preprocessing takes place inside compute_nowcast
#triangles[[diseases[1]]] <- read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\triangle_künstliches_Prob.csv",
#                               colClasses = c("date" = "Date"), check.names = FALSE)
# read in target time series:
#targets[[diseases[1]]] <- read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\target_künstliches_Prob.csv",
#                                colClasses = c("date" = "Date"), check.names = FALSE)
#Daten=Daten_künstlich(as.Date("2023-10-29"))
Datum=as.Date("2024-10-06")
triangle_künstlich(Datum )
target_künstlich(Datum)
triangles[[diseases[1]]]=read.csv(paste0("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\triangle_künstliches_Prob_",Datum,".csv"),colClasses = c("date" = "Date"), check.names = FALSE)
triangles[["delay"]]=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\reporting_triangle-icosari-sari.csv",colClasses = c("date" = "Date"), check.names = FALSE)
targets[[diseases[1]]]=read.csv(paste0("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\target_künstliches_Prob_",Datum,".csv"),colClasses = c("date" = "Date"), check.names = FALSE)
targets[["delay"]]=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\target-icosari-sari.csv",colClasses = c("date" = "Date"), check.names = FALSE)
#Bis hier müsste Code passen
SARI_liste=list()
# run over forecast dates to generate nowcasts:
disease=diseases[1]
ages=unique(targets[[disease]]$age_group)
for (age in ages) {
for(i in seq_along(forecast_dates)){                    #Durchläuft alle Prognosedaten der Liste forecast_dates
forecast_date <- forecast_dates[i]                    #Speichert aktuelles Prognosedatum in forecast_date
cat(as.character(forecast_dates[i]), "\n")            #Gibt Prognosedatum auf Console aus
# run over diseases:                           #Durchlaufe Sari
#assign(paste0("liste",disease),list())
# generate nowcasts for age group 00+
# note: pre-processing and subsetting of RT takes place inside
# note: observed is the reporting triangle for which to generate a nowcast,
# observed 2 is the triangle used to estimate the delay pattern (to do this,
# borrow_delays and borrow_dispersion need to be set to TRUE)
nc <- compute_nowcast(observed = triangles[[disease]], # this is the reporting triangle for which to compute nowcasts
location = "DE",              #Wir haben doch sowieso nur DE Daten?
age_group = age,            #Für meine Arbeit raus nehmen.
forecast_date = forecast_date,
observed2 = triangles$delay, # use complete sari to estimate delays
location2 = "DE",
age_group2 = "00+",
type = "additions",
borrow_delays = TRUE,          #Verzögerungsdaten von Sari nutzen
borrow_dispersion = TRUE,      #Verzögerungsverteilung von Sari nutzen
# note using n_history_expectations_, n_history_dispersion_,
# which may be reduced to fit shorter triangle.
n_history_expectations = n_history_expectations,
n_history_dispersion = n_history_dispersion,
max_delay = max_delay)
# note: message "Reporting triangle contains dates later than forecast_date..."
# is normal when using the function on earlier dates.
# keep only result element:
nc <- nc$result                                       #Extrahiert nur die Ergebnisse aus dem Nowcasting Objekt
# generate a plot if desired:
if(plot_all){
# truth data as of forecast_date, subset to relevant stratum
observed_back_in_time <- data_as_of(dat_truth = triangles[[disease]], date = forecast_date,                                           #data_as_of():Extrahiert die historischen Daten zum Zeitpunkt des Prognosedatums
location = "DE", age_group = age, max_lag = max_delay)
plot_data_back_in_time <- data.frame(date = as.Date(observed_back_in_time$date),                                                      #Erstellt Data Frame mit  Datum und zugehörig aufsummierten Werten
value = rowSums(observed_back_in_time[, grepl("value_", colnames(observed_back_in_time))],
na.rm = TRUE))
target_current <- subset(targets[[disease]], age_group == age & location == "DE")
plot_forecast(forecasts = nc,                       #Erstellt den Plot der vergangenen Daten inklusive Nowcast
location = "DE",
age_group = age,
truth = plot_data_back_in_time,
levels_coverage = c(0.5, 0.95),       #Gibt "Schlauch" um die Daten an mit 50% und 95% Quantil
start = as.Date(forecast_date) - 135,      #Zeitfenster um Prognosedatum -135 Tage bis Prognosedatum bis 28 nach Prognosedatum
end = as.Date(forecast_date) + 28,
forecast_date = forecast_date,
ylim = c(0, 1.2*max(tail(plot_data_back_in_time$value, 20)))        #Passt y-Achse an jüngste Datenwerte an
)
# add the most recent data:
lines(target_current$date, target_current$value, col = "red", lty  ="solid")      #aktuelle Daten
title(paste0(disease, ", ", age, " ,", forecast_date))                          #Titel
}
r=r+1
SARI_liste[[r]]=cbind(nc,disease)
# write out:
# need to adapt path if nowcasts shall be written out.
#write.csv(nc, file = paste0("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten",
#forecast_date, "-", data_source, "-", disease, "-KIT-simple_nowcast.csv"), row.names = FALSE)
#browser()
}
}
# Set locale to English, otherwise there will be some unnecessary warnings
# (when weekdays are checked)
#Sys.setlocale(category = "LC_TIME", locale = "en_US.UTF8")
Sys.setlocale("LC_TIME", "English_United States")
# path of the repo:
path_repo <- "."
# get functions:
source("C:\\Users\\felix\\Desktop\\Uni\\BA\\Code\\Fremder Code\\baseline.R")
source("C:\\Users\\felix\\Desktop\\Uni\\BA\\Code\\Fremder Code\\respinow_viz.R")
source("C:\\Users\\felix\\Desktop\\Uni\\BA\\Code\\eigener Code\\Datenvorbereitung_künstlichesProb.R")
# define data sources (you need just icosari):
data_source <- "icosari"
# diseases per data source.
#diseases <- c("sari")
# will later likely become:
diseases <- c("sari")
# dates for which to produce nowcasts:
# for retrospective generation:
#forecast_dates=c(as.Date("2024-10-03"),as.Date("2025-04-10"))
# or select an individual forecast_date:
#forecast_dates <- as.Date("2024-10-10")                   #Da Meldungen immer Donnerstags sollte dieses Datum ebenfalls ein Donnerstag sein
# set the sizes of training data sets
n_history_dispersion <- 15
n_history_expectations <- 15
max_delay <- 4
max_horizon <- 4
forecast_dates <- seq(from = as.Date("2024-10-10"),                     #Muss geändert werden
to = as.Date("2025-04-10"),
by = 7)
# specify if plots are to be generated for each nowcast:
plot_all <- TRUE
class(forecast_dates)
# read in reporting triangles:
triangles <- targets <- list()
#for (disease in diseases) {
# note: we load raw reporting triangles, preprocessing takes place inside compute_nowcast
#triangles[[diseases[1]]] <- read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\triangle_künstliches_Prob.csv",
#                               colClasses = c("date" = "Date"), check.names = FALSE)
# read in target time series:
#targets[[diseases[1]]] <- read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\target_künstliches_Prob.csv",
#                                colClasses = c("date" = "Date"), check.names = FALSE)
#Daten=Daten_künstlich(as.Date("2023-10-29"))
Datum=as.Date("2024-10-06")
triangle_künstlich(Datum )
target_künstlich(Datum)
triangles[[diseases[1]]]=read.csv(paste0("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\triangle_künstliches_Prob_",Datum,".csv"),colClasses = c("date" = "Date"), check.names = FALSE)
triangles[["delay"]]=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\reporting_triangle-icosari-sari.csv",colClasses = c("date" = "Date"), check.names = FALSE)
targets[[diseases[1]]]=read.csv(paste0("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\target_künstliches_Prob_",Datum,".csv"),colClasses = c("date" = "Date"), check.names = FALSE)
targets[["delay"]]=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\target-icosari-sari.csv",colClasses = c("date" = "Date"), check.names = FALSE)
#Bis hier müsste Code passen
SARI_liste=list()
# run over forecast dates to generate nowcasts:
disease=diseases[1]
ages=unique(targets[[disease]]$age_group)
for (age in ages) {
for(i in seq_along(forecast_dates)){                    #Durchläuft alle Prognosedaten der Liste forecast_dates
forecast_date <- forecast_dates[i]                    #Speichert aktuelles Prognosedatum in forecast_date
cat(as.character(forecast_dates[i]), "\n")            #Gibt Prognosedatum auf Console aus
# run over diseases:                           #Durchlaufe Sari
#assign(paste0("liste",disease),list())
# generate nowcasts for age group 00+
# note: pre-processing and subsetting of RT takes place inside
# note: observed is the reporting triangle for which to generate a nowcast,
# observed 2 is the triangle used to estimate the delay pattern (to do this,
# borrow_delays and borrow_dispersion need to be set to TRUE)
nc <- compute_nowcast(observed = triangles[[disease]], # this is the reporting triangle for which to compute nowcasts
location = "DE",              #Wir haben doch sowieso nur DE Daten?
age_group = age,            #Für meine Arbeit raus nehmen.
forecast_date = forecast_date,
observed2 = triangles$delay, # use complete sari to estimate delays
location2 = "DE",
age_group2 = "00+",
type = "additions",
borrow_delays = TRUE,          #Verzögerungsdaten von Sari nutzen
borrow_dispersion = TRUE,      #Verzögerungsverteilung von Sari nutzen
# note using n_history_expectations_, n_history_dispersion_,
# which may be reduced to fit shorter triangle.
n_history_expectations = n_history_expectations,
n_history_dispersion = n_history_dispersion,
max_delay = max_delay)
# note: message "Reporting triangle contains dates later than forecast_date..."
# is normal when using the function on earlier dates.
# keep only result element:
nc <- nc$result                                       #Extrahiert nur die Ergebnisse aus dem Nowcasting Objekt
# generate a plot if desired:
if(plot_all){
# truth data as of forecast_date, subset to relevant stratum
observed_back_in_time <- data_as_of(dat_truth = triangles[[disease]], date = forecast_date,                                           #data_as_of():Extrahiert die historischen Daten zum Zeitpunkt des Prognosedatums
location = "DE", age_group = age, max_lag = max_delay)
plot_data_back_in_time <- data.frame(date = as.Date(observed_back_in_time$date),                                                      #Erstellt Data Frame mit  Datum und zugehörig aufsummierten Werten
value = rowSums(observed_back_in_time[, grepl("value_", colnames(observed_back_in_time))],
na.rm = TRUE))
target_current <- subset(targets[[disease]], age_group == age & location == "DE")
plot_forecast(forecasts = nc,                       #Erstellt den Plot der vergangenen Daten inklusive Nowcast
location = "DE",
age_group = age,
truth = plot_data_back_in_time,
levels_coverage = c(0.5, 0.95),       #Gibt "Schlauch" um die Daten an mit 50% und 95% Quantil
start = as.Date(forecast_date) - 135,      #Zeitfenster um Prognosedatum -135 Tage bis Prognosedatum bis 28 nach Prognosedatum
end = as.Date(forecast_date) + 28,
forecast_date = forecast_date,
ylim = c(0, 1.2*max(tail(plot_data_back_in_time$value, 20)))        #Passt y-Achse an jüngste Datenwerte an
)
# add the most recent data:
lines(target_current$date, target_current$value, col = "red", lty  ="solid")      #aktuelle Daten
title(paste0(disease, ", ", age, " ,", forecast_date))                          #Titel
}
r=r+1
SARI_liste[[r]]=cbind(nc,disease)
# write out:
# need to adapt path if nowcasts shall be written out.
#write.csv(nc, file = paste0("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten",
#forecast_date, "-", data_source, "-", disease, "-KIT-simple_nowcast.csv"), row.names = FALSE)
#browser()
}
}
# Set locale to English, otherwise there will be some unnecessary warnings
# (when weekdays are checked)
#Sys.setlocale(category = "LC_TIME", locale = "en_US.UTF8")
Sys.setlocale("LC_TIME", "English_United States")
# path of the repo:
path_repo <- "."
# get functions:
source("C:\\Users\\felix\\Desktop\\Uni\\BA\\Code\\Fremder Code\\baseline.R")
source("C:\\Users\\felix\\Desktop\\Uni\\BA\\Code\\Fremder Code\\respinow_viz.R")
source("C:\\Users\\felix\\Desktop\\Uni\\BA\\Code\\eigener Code\\Datenvorbereitung_künstlichesProb.R")
# define data sources (you need just icosari):
data_source <- "icosari"
# diseases per data source.
#diseases <- c("sari")
# will later likely become:
diseases <- c("sari")
# dates for which to produce nowcasts:
# for retrospective generation:
#forecast_dates=c(as.Date("2024-10-03"),as.Date("2025-04-10"))
# or select an individual forecast_date:
#forecast_dates <- as.Date("2024-10-10")                   #Da Meldungen immer Donnerstags sollte dieses Datum ebenfalls ein Donnerstag sein
# set the sizes of training data sets
n_history_dispersion <- 15
n_history_expectations <- 15
max_delay <- 4
max_horizon <- 4
forecast_dates <- seq(from = as.Date("2024-10-10"),                     #Muss geändert werden
to = as.Date("2025-04-10"),
by = 7)
# specify if plots are to be generated for each nowcast:
plot_all <- TRUE
class(forecast_dates)
# read in reporting triangles:
triangles <- targets <- list()
#for (disease in diseases) {
# note: we load raw reporting triangles, preprocessing takes place inside compute_nowcast
#triangles[[diseases[1]]] <- read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\triangle_künstliches_Prob.csv",
#                               colClasses = c("date" = "Date"), check.names = FALSE)
# read in target time series:
#targets[[diseases[1]]] <- read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\target_künstliches_Prob.csv",
#                                colClasses = c("date" = "Date"), check.names = FALSE)
#Daten=Daten_künstlich(as.Date("2023-10-29"))
Datum=as.Date("2024-10-06")
triangle_künstlich(Datum )
target_künstlich(Datum)
triangles[[diseases[1]]]=read.csv(paste0("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\triangle_künstliches_Prob_",Datum,".csv"),colClasses = c("date" = "Date"), check.names = FALSE)
triangles[["delay"]]=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\reporting_triangle-icosari-sari.csv",colClasses = c("date" = "Date"), check.names = FALSE)
targets[[diseases[1]]]=read.csv(paste0("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\target_künstliches_Prob_",Datum,".csv"),colClasses = c("date" = "Date"), check.names = FALSE)
targets[["delay"]]=read.csv("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten\\target-icosari-sari.csv",colClasses = c("date" = "Date"), check.names = FALSE)
#Bis hier müsste Code passen
SARI_liste=list()
# run over forecast dates to generate nowcasts:
disease=diseases[1]
ages=unique(targets[[disease]]$age_group)
for (age in ages) {
for(i in seq_along(forecast_dates)){                    #Durchläuft alle Prognosedaten der Liste forecast_dates
forecast_date <- forecast_dates[i]                    #Speichert aktuelles Prognosedatum in forecast_date
cat(as.character(forecast_dates[i]), "\n")            #Gibt Prognosedatum auf Console aus
# run over diseases:                           #Durchlaufe Sari
#assign(paste0("liste",disease),list())
# generate nowcasts for age group 00+
# note: pre-processing and subsetting of RT takes place inside
# note: observed is the reporting triangle for which to generate a nowcast,
# observed 2 is the triangle used to estimate the delay pattern (to do this,
# borrow_delays and borrow_dispersion need to be set to TRUE)
nc <- compute_nowcast(observed = triangles[[disease]], # this is the reporting triangle for which to compute nowcasts
location = "DE",              #Wir haben doch sowieso nur DE Daten?
age_group = age,            #Für meine Arbeit raus nehmen.
forecast_date = forecast_date,
observed2 = triangles$delay, # use complete sari to estimate delays
location2 = "DE",
age_group2 = "00+",
type = "additions",
borrow_delays = TRUE,          #Verzögerungsdaten von Sari nutzen
borrow_dispersion = TRUE,      #Verzögerungsverteilung von Sari nutzen
# note using n_history_expectations_, n_history_dispersion_,
# which may be reduced to fit shorter triangle.
n_history_expectations = n_history_expectations,
n_history_dispersion = n_history_dispersion,
max_delay = max_delay)
# note: message "Reporting triangle contains dates later than forecast_date..."
# is normal when using the function on earlier dates.
# keep only result element:
nc <- nc$result                                       #Extrahiert nur die Ergebnisse aus dem Nowcasting Objekt
# generate a plot if desired:
if(plot_all){
# truth data as of forecast_date, subset to relevant stratum
observed_back_in_time <- data_as_of(dat_truth = triangles[[disease]], date = forecast_date,                                           #data_as_of():Extrahiert die historischen Daten zum Zeitpunkt des Prognosedatums
location = "DE", age_group = age, max_lag = max_delay)
plot_data_back_in_time <- data.frame(date = as.Date(observed_back_in_time$date),                                                      #Erstellt Data Frame mit  Datum und zugehörig aufsummierten Werten
value = rowSums(observed_back_in_time[, grepl("value_", colnames(observed_back_in_time))],
na.rm = TRUE))
target_current <- subset(targets[[disease]], age_group == age & location == "DE")
plot_forecast(forecasts = nc,                       #Erstellt den Plot der vergangenen Daten inklusive Nowcast
location = "DE",
age_group = age,
truth = plot_data_back_in_time,
levels_coverage = c(0.5, 0.95),       #Gibt "Schlauch" um die Daten an mit 50% und 95% Quantil
start = as.Date(forecast_date) - 135,      #Zeitfenster um Prognosedatum -135 Tage bis Prognosedatum bis 28 nach Prognosedatum
end = as.Date(forecast_date) + 28,
forecast_date = forecast_date,
ylim = c(0, 1.2*max(tail(plot_data_back_in_time$value, 20)))        #Passt y-Achse an jüngste Datenwerte an
)
# add the most recent data:
lines(target_current$date, target_current$value, col = "red", lty  ="solid")      #aktuelle Daten
title(paste0(disease, ", ", age, " ,", forecast_date))                          #Titel
}
r=0
r=r+1
SARI_liste[[r]]=cbind(nc,disease)
# write out:
# need to adapt path if nowcasts shall be written out.
#write.csv(nc, file = paste0("C:\\Users\\felix\\Desktop\\Uni\\BA\\Daten",
#forecast_date, "-", data_source, "-", disease, "-KIT-simple_nowcast.csv"), row.names = FALSE)
#browser()
}
}
